*********************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************
Images are stored in the form of a grid. Image recognition is possible by comparing grids of two images and checking if they have any matching regions.

You are given two grids where each cell of a grid contains is either 0 or 1. If two cells share a side then they are adjacent. Cells that contain 1s form a connected region 
if any cell of that region can be reached by moving through the adjacent cells that contain 1. Overlay the first grid onto the second and if a region in the first grid 
completely matches a region in the second grid, the regions are matched.
Count total number of such matched regions in the second grid.

For example given two 3x3 grids:

G1:	111		G2: 111
	100			100
	100			101
There are two regions in G2: {(0,0), (0,1), (0,2), (1,0), (2,0)} and {(2,2)}. Regions in G1 cover the first region in G2 but not the second region. Thus, there is only one 
matching region.

Making a slight alteration to the above example:

G1:	111		G2: 111
	101			100
	100			101
Now there are no matching regions. From G1, "1" at position (1,2) is not matched in G2. G2[2][2] == "1" is not matched in G1.

Complete the function countMatches below. The function must return the number of matching regions. It has the following parameters:
• G1[G1[0], ..., G1[n-1]]: an array of bit strings representing the rows if image 1
• G2[G2[0], ..., G2[n-1]]: an array of bit strings representing the rows if image 2

Constraints:
▪ 1 ≤ n ≤ 100
▪ 1 ≤ |G1[i]|, |G2[i]| ≤ 100
▪ Grid cells contain only 0 or 1
*************************************************************************************************************************************************************************************
*************************************************************************************************************************************************************************************
#include <iostream>
#include <bits/stdc++.h>

using namespace std;

bool dfs (int **img, int i, int j, int row, int col)
{
  if (i < 0 || j < 0 || i >= row || j >= col)
    return true;

  int cell = img[i][j];
  img[i][j] = 0;
  if (cell == 0)
    return true;
  else if (cell == 1)
    {
      dfs (img, i + 1, j, row, col);
      dfs (img, i - 1, j, row, col);
      dfs (img, i, j + 1, row, col);
      dfs (img, i, j - 1, row, col);
      return false;
    }
  else
    return dfs (img, i + 1, j, row, col) && dfs (img, i - 1, j, row, col) && dfs (img, i, j + 1, row, col)
      && dfs (img, i, j - 1, row, col);
}

int
count_islands (int **img1, int **img2, int row, int col)
{
  for (int i = 0; i < row; i++)
    for (int j = 0; j < col; j++)
      img1[i][j] = img1[i][j] + img2[i][j];

  int count = 0;
  for (int i = 0; i < row; i++)
    for (int j = 0; j < col; j++)
      if (img1[i][j] == 2 && dfs (img1, i, j, row, col))
	count++;

  return count;
}

int main ()
{
  int row, col;
  cin >> row >> col;
  int **img1 = new int*[row];
  int **img2 = new int*[row];
  for (int i = 0; i < row; i++)
    {
       img1[i] = new int[col];
      for (int j = 0; j < col; j++)
	  cin >> img1[i][j];
        
    }
    for (int i = 0; i < row; i++)
    {
       img2[i] = new int[col];
      for (int j = 0; j < col; j++)
	  cin >> img2[i][j];
        
    }
    cout << count_islands(img1,img2,row,col);
    
    for(int i = 0; i < row; i++)
    delete [] img1[i];
    
    delete [] img1;
    
    for(int i = 0; i < row; i++)
    delete [] img2[i];
    
    delete [] img2;
    
    return 0;
}
